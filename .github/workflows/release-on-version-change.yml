name: Release on Version Change
on:
  push:
    paths:
      - 'core/app.go'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Get previous commit SHA
        id: prev
        run: echo "previous_sha=$(git rev-parse HEAD^1)" >> "$GITHUB_OUTPUT"
        
      - name: Extract old and new version
        id: extract_version
        run: |
          echo "=== Debugging version extraction ==="
          echo "Current core/app.go content:"
          cat core/app.go | head -20
          echo ""
          echo "Previous core/app.go content:"
          git show ${{ steps.prev.outputs.previous_sha }}:core/app.go | head -20
          echo ""
          
          old_version=$(git show ${{ steps.prev.outputs.previous_sha }}:core/app.go | grep -E 'var Version|Version.*=' | head -1 | sed -n 's/.*["`'"'"']\([^"`'"'"']*\)["`'"'"'].*/\1/p' || echo "")
          new_version=$(cat core/app.go | grep -E 'var Version|Version.*=' | head -1 | sed -n 's/.*["`'"'"']\([^"`'"'"']*\)["`'"'"'].*/\1/p' || echo "")
          
          echo "Extracted old_version: '$old_version'"
          echo "Extracted new_version: '$new_version'"
          
          echo "old_version=$old_version" >> $GITHUB_OUTPUT
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          
      - name: Check if versions differ
        id: version_check
        run: |
          if [ "${{ steps.extract_version.outputs.old_version }}" != "${{ steps.extract_version.outputs.new_version }}" ] && [ -n "${{ steps.extract_version.outputs.new_version }}" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Check if release exists
        id: check_release
        if: steps.version_check.outputs.version_changed == 'true'
        run: |
          tag="${{ steps.extract_version.outputs.new_version }}"
          if [ -z "$tag" ]; then
            echo "exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag")
          if [ "$response" = "200" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Build project
        if: steps.version_check.outputs.version_changed == 'true'
        run: |
          mkdir -p build
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o build/lumi-mac-arm64 bin/main.go
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o build/lumi-windows-amd64.exe bin/main.go
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o build/lumi-linux-amd64 bin/main.go
          ls -la build/
          
      - name: Create git tag
        if: steps.version_check.outputs.version_changed == 'true'
        run: |
          tag="${{ steps.extract_version.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$tag" -m "Release version $tag"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin "$tag"
          
      - name: Generate release notes
        if: steps.version_check.outputs.version_changed == 'true' && steps.check_release.outputs.exists == 'false'
        id: release_notes
        run: |
          tag="${{ steps.extract_version.outputs.new_version }}"
          old_tag="${{ steps.extract_version.outputs.old_version }}"
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          if [ -n "$old_tag" ] && git tag | grep -q "^$old_tag$"; then
            echo "### Commits since $old_tag:" >> release_notes.md
            git log --oneline "$old_tag".."$tag" --no-merges >> release_notes.md || echo "- Initial release" >> release_notes.md
          else
            echo "- Initial release" >> release_notes.md
          fi
          echo "" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$old_tag...$tag" >> release_notes.md
          {
            echo "notes<<EOF"
            cat release_notes.md
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release and upload assets
        if: steps.version_check.outputs.version_changed == 'true' && (steps.check_release.outputs.exists == 'false' || steps.check_release.outputs.exists == '')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.extract_version.outputs.new_version }}
          name: "Release ${{ steps.extract_version.outputs.new_version }}"
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false
          files: |
            build/lumi-mac-arm64
            build/lumi-windows-amd64.exe
            build/lumi-linux-amd64
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Workflow summary
        if: always()
        run: |
          echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Old Version**: ${{ steps.extract_version.outputs.old_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version**: ${{ steps.extract_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Changed**: ${{ steps.version_check.outputs.version_changed }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.version_check.outputs.version_changed }}" = "true" ]; then
            echo "- **Release Created**: âœ…" >> $GITHUB_STEP_SUMMARY
            echo "- **Tag**: ${{ steps.extract_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Action**: No release created (no version change)" >> $GITHUB_STEP_SUMMARY
          fi